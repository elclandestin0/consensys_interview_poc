/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface NFTPlatformContract
  extends Truffle.Contract<NFTPlatformInstance> {
  "new"(
    acceptedToken: string,
    meta?: Truffle.TransactionDetails
  ): Promise<NFTPlatformInstance>;
}

export interface AcceptBid {
  name: "AcceptBid";
  args: {
    bidId: BN;
    from: string;
    initialPremiumFee: BN;
    duration: BN;
    0: BN;
    1: string;
    2: BN;
    3: BN;
  };
}

export interface CreateBid {
  name: "CreateBid";
  args: {
    tokenContract: string;
    askAmount: BN;
    nftContract: string;
    tokenId: BN;
    from: string;
    0: string;
    1: BN;
    2: string;
    3: BN;
    4: string;
  };
}

export interface DefaultLoan {
  name: "DefaultLoan";
  args: {
    bidId: BN;
    nftContract: string;
    tokenId: BN;
    0: BN;
    1: string;
    2: BN;
  };
}

export interface PayPrincipal {
  name: "PayPrincipal";
  args: {
    bidId: BN;
    tokenPaidIn: string;
    amountPaid: BN;
    0: BN;
    1: string;
    2: BN;
  };
}

type AllEvents = AcceptBid | CreateBid | DefaultLoan | PayPrincipal;

export interface NFTPlatformInstance extends Truffle.ContractInstance {
  acceptedBids(
    arg0: string,
    arg1: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: string; 1: BN; 2: string; 3: string; 4: BN }>;

  acceptedTokens(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  bids(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: string; 1: BN; 2: string; 3: string; 4: BN }>;

  nextBidId(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  createBid: {
    (
      _tokenAddress: string,
      _amount: number | BN | string,
      _nftContract: string,
      _tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _tokenAddress: string,
      _amount: number | BN | string,
      _nftContract: string,
      _tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _tokenAddress: string,
      _amount: number | BN | string,
      _nftContract: string,
      _tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _tokenAddress: string,
      _amount: number | BN | string,
      _nftContract: string,
      _tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    acceptedBids(
      arg0: string,
      arg1: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: string; 1: BN; 2: string; 3: string; 4: BN }>;

    acceptedTokens(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    bids(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: string; 1: BN; 2: string; 3: string; 4: BN }>;

    nextBidId(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    createBid: {
      (
        _tokenAddress: string,
        _amount: number | BN | string,
        _nftContract: string,
        _tokenId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _tokenAddress: string,
        _amount: number | BN | string,
        _nftContract: string,
        _tokenId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _tokenAddress: string,
        _amount: number | BN | string,
        _nftContract: string,
        _tokenId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _tokenAddress: string,
        _amount: number | BN | string,
        _nftContract: string,
        _tokenId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
