/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface NFTPlatformContract
  extends Truffle.Contract<NFTPlatformInstance> {
  "new"(
    acceptedToken: string,
    meta?: Truffle.TransactionDetails
  ): Promise<NFTPlatformInstance>;
}

export interface BidAccepted {
  name: "BidAccepted";
  args: {
    bidId: BN;
    from: string;
    0: BN;
    1: string;
  };
}

export interface BidCreated {
  name: "BidCreated";
  args: {
    tokenContract: string;
    askAmount: BN;
    nftContract: string;
    tokenId: BN;
    from: string;
    0: string;
    1: BN;
    2: string;
    3: BN;
    4: string;
  };
}

export interface LoanDefaulted {
  name: "LoanDefaulted";
  args: {
    bidId: BN;
    0: BN;
  };
}

export interface LoanRepaid {
  name: "LoanRepaid";
  args: {
    bidId: BN;
    tokenPaidIn: string;
    amountPaid: BN;
    0: BN;
    1: string;
    2: BN;
  };
}

type AllEvents = BidAccepted | BidCreated | LoanDefaulted | LoanRepaid;

export interface NFTPlatformInstance extends Truffle.ContractInstance {
  acceptedLoans(
    arg0: string,
    arg1: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    0: BN;
    1: string;
    2: BN;
    3: string;
    4: string;
    5: BN;
    6: boolean;
  }>;

  acceptedNFTs(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  acceptedTokens(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  bids(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    0: BN;
    1: string;
    2: BN;
    3: string;
    4: string;
    5: BN;
    6: boolean;
  }>;

  loans(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    0: BN;
    1: string;
    2: BN;
    3: string;
    4: string;
    5: BN;
    6: boolean;
    7: string;
  }>;

  nextBidId(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  createBid: {
    (
      _tokenAddress: string,
      _amount: number | BN | string,
      _nftContract: string,
      _tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _tokenAddress: string,
      _amount: number | BN | string,
      _nftContract: string,
      _tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _tokenAddress: string,
      _amount: number | BN | string,
      _nftContract: string,
      _tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _tokenAddress: string,
      _amount: number | BN | string,
      _nftContract: string,
      _tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  acceptBid: {
    (
      bidId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      bidId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      bidId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      bidId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  repayLoan: {
    (
      bidId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      bidId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      bidId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      bidId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  defaultLoan: {
    (
      bidId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      bidId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      bidId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      bidId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    acceptedLoans(
      arg0: string,
      arg1: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      0: BN;
      1: string;
      2: BN;
      3: string;
      4: string;
      5: BN;
      6: boolean;
    }>;

    acceptedNFTs(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    acceptedTokens(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    bids(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      0: BN;
      1: string;
      2: BN;
      3: string;
      4: string;
      5: BN;
      6: boolean;
    }>;

    loans(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      0: BN;
      1: string;
      2: BN;
      3: string;
      4: string;
      5: BN;
      6: boolean;
      7: string;
    }>;

    nextBidId(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    createBid: {
      (
        _tokenAddress: string,
        _amount: number | BN | string,
        _nftContract: string,
        _tokenId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _tokenAddress: string,
        _amount: number | BN | string,
        _nftContract: string,
        _tokenId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _tokenAddress: string,
        _amount: number | BN | string,
        _nftContract: string,
        _tokenId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _tokenAddress: string,
        _amount: number | BN | string,
        _nftContract: string,
        _tokenId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    acceptBid: {
      (
        bidId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        bidId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        bidId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        bidId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    repayLoan: {
      (
        bidId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        bidId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        bidId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        bidId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    defaultLoan: {
      (
        bidId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        bidId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        bidId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        bidId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
